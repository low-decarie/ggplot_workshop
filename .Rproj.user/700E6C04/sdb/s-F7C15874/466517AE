{
    "collab_server" : "",
    "contents" : "<style>\n.small-code pre code {\n  font-size: 0.75em;\n}\n</style>\n\nggplot2\n========================================================\nauthor: Etienne Low-Décarie\ntransition: rotate\n\nAbout you\n===\n\n\n\n\nMaterial\n===\n\nTo view presentations:   \nsearch: low-decarie wrangling github\n\n[http://low-decarie.github.io/Data_wrangling_and_plotting/#/](http://low-decarie.github.io/Data_wrangling_and_plotting)\n\nTo view code that generated presentations:  \nhttps://github.com/low-decarie/Data_wrangling_and_plotting  \nYou can look at the `.Rpres` files that generated these presentations  \nYou can run the code in these presentation (even all of it, using Chunks>Run All)\n\nThere is a folder called `./Data/` that contains data relavant to some of the exercises\n\n\n\nWithout R\n===\n\n![Without R](./ggplot2_images/without_r.png)\n\nWith R \n===\n\n![With R](./ggplot2_images/with_r.png)\n\n\n\nBeautiful and flexible! \n===\n\n![Pretty ggplots](./ggplot2_images/pretty_examples.png)\n\n```{r fig.width=7, fig.height=6,echo=FALSE}\n# img <- readPNG(\"./ggplot2_images/pretty_examples.png\")\n#  grid.raster(img)\n```\n\nOutline (ggplot2)\n===\n\n1. Your first ggplot plot\n    + basic scatter plot \n    + Exercise 1\n2. Grammar of graphics\n    + More advanced plots\n    + Available plot elements and when to use them\n    + Exercise 2\n3. Saving a plot\n  + Exercise 3\n  + Challenge\n  \n***\n\n4. Expanding ggplot    \n5. Fine tuning your plot\n    + colours\n    + themes\n6. Maps\n\n\nA few pet peeves\n===\n\n- Always work from a script\n- Use carriage returns and indentation\n\n```{r eval=F}\nobject <- function(argument1=\"value1\",\n                   argument2=\"value2\",\n                   argument3=\"value3\")\n```\n\n- Create your own new script\n  + refer to provided code only if needed\n  + don't just copy paste from the presentation\n\n```{r fig.width=7, fig.height=6,echo=FALSE}\nlibrary(png)\nlibrary(grid)\n```\n\n\n\nInstall/load ggplot2\n===\n\n```{r}\nif(!require(ggplot2)){install.packages(\"ggplot2\")}\nrequire(ggplot2)\n```\n\n\n\n\nYour first ggplot \n===\n\nA basic scatter plot\n```{r fig.width=3, fig.height=3, eval=F}\nqplot(data=iris,\n      x=Sepal.Length,\n      y=Sepal.Width)\n```\n\n***\n\n```{r fig.width=3, fig.height=3, echo=F}\nqplot(data=iris,\n      x=Sepal.Length,\n      y=Sepal.Width)\n```\n\n\nCategorical x-axis  \n===\n```{r fig.width=4, fig.height=4}\nqplot(data=iris,\n      x=Species,\n      y=Sepal.Width)\n```\n\nLess basic scatter plot\n===\n```{r}\n?qplot\n```\n\nArguments\n```\nx\ny\n…\ndata\nxlab\nylab\nmain\n```\n\nLess basic scatter plot \n===\n\n```{r fig.width=4, fig.height=4}\nqplot(data=iris,\n      x=Sepal.Length,\n      xlab=\"Sepal Width (mm)\",\n      y=Sepal.Width,\n      ylab=\"Sepal Length (mm)\",\n      main=\"Sepal dimensions\")\n```\n\n\n\nExercise 1\n===\nproduce a basic plot with built in data\n```\nCO2\n?CO2\nBOD\ndata()\n```\nWARNING: THERE ARE MULTIPLE CO2/co2 datasets\n(CASE SENSITIVE)\n\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown2 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\nGrammar of graphics (gg)\n===\n\nA graphic is made of elements (layers)\n\n- data\n- aesthetics (aes)\n- transformation\n- geoms (geometric objects)\n- axis (coordinate system)\n- scales\n\n***\n\n![layers of a plot](./ggplot2_images/seperate_elements.png)\n\n\nAesthetics (aes) make data visible:\n===\n\n+ x,y : position along the x and y axis\n+ colour: the colour of the point\n+ group: what group a point belongs to \n+ shape: the figure used to plot a point\n+ linetype: the type of line used (solid, dashed, etc)\n+ size: the size of the point or line\n+ alpha: the transparency of the point \n\ngeometric objects(geoms)\n===\n\n+ point: scatterplot\n+ line: line plot, where lines connect points by increasing x value\n+ path: line plot, where lines connect points in sequence of appearance\n+ boxplot: box-and-whisker plots, for categorical y data\n+ bar: barplots\n+ histogram: histograms (for 1-dimensional data)\n\nSingle element edit\n===\n\nEditing an element produces a new graph\ne.g. just change the coordinate system\n\n\n```{r fig.width=3, fig.height=3,echo=FALSE}\nDF <- data.frame(variable = LETTERS[1:10], value = sample(10,\n                                                 replace = TRUE))\n\np_bar <- ggplot(data=DF, \n                aes(x=variable,\n              fill=variable,\n              y=value))+\n                geom_bar(stat=\"identity\")\nprint(p_bar)\n\np_polar <- p_bar + coord_polar()\n\nprint(p_polar)\n```\n\n\nHow it works\n===\n\n- 1. create a simple plot object\n```{r eval=FALSE}\nplot.object<-qplot()\nor\nplot.object<-ggplot()\n```\n- 2. add graphical layers/complexity\n```{r eval=FALSE}\nplot.object<-plot.object+layer()\n```\n- 3. repeat step 2 until satisfied  \n- 4. print your object to screen (or to graphical device)  \n```{r  eval=FALSE}\nprint(plot.object)\n```\n\n\nScatter plot as an R object\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nbasic.plot<-qplot(data=iris,\n                  x=Sepal.Length,\n                  xlab=\"Sepal Width (mm)\",\n                  y=Sepal.Width,\n                  ylab=\"Sepal Length (mm)\",\n                  main=\"Sepal dimensions\")\n\nprint(basic.plot)\n```\n\n\nUsing ggplot function\n===\n\nmore powerful, more complicated\nNote: aes() and geom_point()\n\n```{r fig.width=4, fig.height=4}\nbasic.plot<- ggplot(data=iris)+\n               aes(x=Sepal.Length,\n                  xlab=\"Sepal Width (mm)\",\n                  y=Sepal.Width,\n                  ylab=\"Sepal Length (mm)\",\n                  main=\"Sepal dimensions\")+\n  geom_point()\n```\nnow required to use stat=\"\"\n\n\n\nScatter plot with colour and shape\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nbasic.plot <- basic.plot+\n              aes(colour=Species,\n                  shape=Species)\n\nprint(basic.plot)\n```\n\n\nScatter plot with linear regression\n===\n\nAdd a geom (eg. linear smooth)\n\n```{r fig.width=3, fig.height=3,echo=T}\nlinear.smooth.plot <- basic.plot+\n\t\t\t  geom_smooth(method=\"lm\", se=F)\n                         print(linear.smooth.plot)\n```\n\n\nExercise 2\n===\n\nproduce a colorful plot containing linear regressions with built in data\n\n```\nCO2\n?CO2\nmsleep\n?msleep\nOrchardSprays\ndata()\n```\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown3 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\n\nUsing facets and groups: the basic plot\n===\n\n```{r fig.width=8, fig.height=4,echo=T}\nCO2.plot<-qplot(data=CO2,\n                x=conc,\n                y=uptake,\n                colour=Treatment)\n\nprint(CO2.plot)\n```\n\nFacets\n===\n\n```{r  eval=FALSE}\nplot.object<-plot.object + facet_grid(rows~columns)\n```\n                         \n                         \n```{r fig.width=8, fig.height=4,echo=T}\nCO2.plot<-CO2.plot+facet_grid(.~Type)\nprint(CO2.plot)\n```\n\nGroups\n===\n\nProblems when adding the geom_line\n\n```{r fig.width=8, fig.height=4,echo=T}\nprint(CO2.plot+geom_line())\n```\n\nGroups\n===\n\nSolution: specify groups\n\n```{r fig.width=8, fig.height=4,echo=T}\nCO2.plot<-CO2.plot+geom_line(aes(group=Plant))\nprint(CO2.plot)\n```\n\nAvailable elements\n===\n\nhttp://docs.ggplot2.org\n\n<iframe src=\"http://docs.ggplot2.org\" width=\"1000\" height=\"800\">\n  <p>Your browser does not support iframes.</p>\n</iframe>\n\nResources\n===\n\ncheatsheets: https://www.rstudio.com/resources/cheatsheets/\n\n<iframe src=\"https://www.rstudio.com/resources/cheatsheets/\" width=\"1000\"  height=\"800\">\n  <p>Your browser does not support iframes.</p>\n</iframe>\n\n\nExercise 3\n===\n\nExplore geoms and other plot elements with the data you have used\nand/or your own data\n\n```\nmsleep\n?msleep\nOrchardSprays\ndata()\n```\n<div class=\"centered\">\n\n<script src=\"countdown.js\" type=\"text/javascript\"></script>\n<script type=\"application/javascript\">\nvar myCountdown3 = new Countdown({\n    \t\t\t\t\t\t\ttime: 300, \n\t\t\t\t\t\t\t\t\twidth:150, \n\t\t\t\t\t\t\t\t\theight:80, \n\t\t\t\t\t\t\t\t\trangeHi:\"minute\"\t// <- no comma on last item!\n\t\t\t\t\t\t\t\t\t});\n\n</script>\n\n</div>\n\n\nSaving plots\n===\n\n```{r  eval=FALSE}\npdf(\"./Plots/todays_plots.pdf\")\n  print(basic.plot)\n  print(plot.with.linear.smooth)\n  print(categorical.plot)\n  print(CO2.plot)\ngraphics.off()\n```\n\nall other base save functions available:  \n`bmp()`, `jpeg()`, etc\n\nSaving plots\n===\n\nggsave: saves last plot and guesses format from file name\n\n```{r  eval=FALSE}\nggsave(\"./Plots/todays_plots.jpeg\", basic.plot)\n```\n\n\n\nUsing the right tool for the right situation\n===\nbase R `plot` function has methods for many different object types\n\n```{r fig.width=3, fig.height=3,echo=T}\nplot(iris)\n```\n\n\nUsing the right tool for the right situation\n===\n\nbase R `plot` function has methods for many different object types\n\n```{r fig.width=3, fig.height=3,echo=T}\nlm.SR <- lm(sr ~ pop15 + pop75 + dpi + ddpi,\n            data = LifeCycleSavings)\nplot(lm.SR)\n```\n\n\nChallenge\n===\n\nFind an interesting data set on Dryad.org, reproduce a figure from the article using ggplot2\n\nExample: try to reproduce figure 1 and 4 from\nLow-Décarie, E., Fussmann, G. F., Bell, G., Low-Decarie, E., Fussmann, G. F., Bell, G., Low-Décarie, E., Fussmann, G. F. & Bell, G. 2014 Aquatic primary production in a high-CO2 world. Trends Ecol. Evol. 29, 1–10.    \n[paper](http://www.sciencedirect.com/science/article/pii/S0169534714000433)  \n[data](http://datadryad.org/handle/10255/dryad.60481)  \nfull scripts also available on github (old ugly code!)\n\n\nExtending ggplot\n===\n\nggplot can be extended for plotting specific classes of objects\n\n`autoplot`\nand\n`fortify`\n\n\nExtending ggplot\n===\n\n`ggfortify` provides `autoplot`and  \n`fortify` for common models\n\n```{r fig.width=3, fig.height=3,echo=T, eval=F}\nrequire(ggfortify)\nautoplot(lm.SR)\n```\n\n***\n\n```{r fig.width=5, fig.height=5,echo=F}\nrequire(ggfortify)\nautoplot(lm.SR)\n```\n\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nhelp(package=ggfortify)\n```\n\nVegan users\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nif(!require(devtools)) {install.packages(\"devtools\")}\nrequire(devtools)\nif(!require(ggvegan)) {install_github(\"gavinsimpson/ggvegan\")}\nrequire(ggvegan)\ndata(dune)\ndata(dune.env)\n```\n\nVegan users\n===\n\n```{r fig.width=5, fig.height=5,echo=T,eval=T}\nsol <- cca(dune ~ A1 + Management,\n           data = dune.env)\nautoplot(sol)\n```\n\nVegan users\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nautoplot(sol) + theme_bw()\n```\n\n\n\nUsing the right tool for the right situation\n===\n\nbase R `plot` function has methods for many different object types\n\n```{r fig.width=3, fig.height=3,echo=T}\nnormal.plot <- plot(sol)\n```\n\n\nFine tunning: Scales\n===\nclass: small-code\n\n```{r fig.width=3, fig.height=3,echo=T}\nCO2.plot +\n  scale_y_continuous(name = \"CO2 uptake rate\",\n                     breaks = seq(5,50, by= 10),\n                     labels = seq(5,50, by= 10), \n                     trans=\"log10\")\n```\n\nFine tunning: Scales\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nCO2.plot+\n  scale_colour_brewer()\n```\n\nFine tunning: Scales\n===\n\n```{r fig.width=3, fig.height=3,echo=T}\nCO2.plot+\n  scale_colour_manual(values=c(\"nonchilled\"=\"red\",\n                               \"chilled\"=\"blue\"))\n```\n\n\nFine tunning: Scales\n===\nBonus!!! Wes Anderson colour palette\n\n![darjeelinglimited](./ggplot2_images/darjeelinglimited.jpg)\n\nFine tunning: Scales\n===\nBonus!!! Wes Anderson colour palette\n\n```{r fig.width=3, fig.height=3,echo=T}\nif(!require(devtools)) {install.packages(\"devtools\")}\nrequire(devtools)\nif(!require(wesanderson)){\ndevtools::install_github(\"karthik/wesanderson\")}\nrequire(wesanderson)\n```\n\nFine tunning: Scales\n===\nBonus!!! Wes Anderson colour palette\n\n```{r fig.width=3, fig.height=3,echo=T}\nrequire(wesanderson)\nbasic.plot + \n  scale_color_manual(values = wesanderson::wes_palette(\"Darjeeling\",3)) \n```\n\nFine tuning: Multiple plots\n===\n\n\n```{r fig.width=5, fig.height=5,echo=T}\nif(!require(gridExtra)) {install.packages(\"gridExtra\")}\nrequire(gridExtra)\n\ngrid.arrange(basic.plot, CO2.plot)\n```\n\nFine tuning: Multiple plots\n===\nclass: small-code\n\nSub-plots can be aligned and matched in size\n\n```{r fig.width=5, fig.height=5,echo=T}\nbasic.plot.table <- ggplot_gtable(ggplot_build(basic.plot))\nCO2.plot.table <- ggplot_gtable(ggplot_build(CO2.plot))\nmaxWidth = grid::unit.pmax(basic.plot.table$widths[2:3],\n                           CO2.plot.table$widths[2:3])\nbasic.plot.table$widths[2:3] <- as.list(maxWidth)\nCO2.plot.table$widths[2:3] <- as.list(maxWidth)\n```  \n\nFine tuning: Multiple plots\n===\nSub-plots can be aligned and matched in size\n\n```{r fig.width=5, fig.height=5,echo=T}\ngrid.arrange(basic.plot.table, \n             CO2.plot.table,\n             ncol=1)\n```\n\nFine tuning: Themes\n===\n\n`theme_set(theme())`  \nor  \n`plot+theme()`\n\n```{r fig.width=8, fig.height=3,echo=T}\nbw <- basic.plot+theme_bw()\ngrey <- basic.plot+theme_bw()\n\ngrid.arrange(basic.plot, bw, grey, nrow=1)\n```\n\n\nFine tuning: Themes\n===\nclass: small-code\n\n```{r fig.width=8, fig.height=3,echo=T}\nmytheme <- theme_grey() +\n theme(plot.title = element_text(colour = \"red\"))\nmytheme_plot <- basic.plot + mytheme\n\ngrid.arrange(basic.plot, mytheme_plot, nrow=1)\n```\n\n\nChallenge\n===\n\nUsing figure from previous challenge (or other dryad.org paper/data), edit figure to match a journal's style requirements\n\nExample: try to reproduce Figure 3 in:\nLucek K, Sivasundar A, Roy D, Seehausen O (2013) Repeated and predictable patterns of ecotypic differentiation during a biological invasion: lake-stream divergence in parapatric Swiss stickleback. Journal of Evolutionary Biology 26(12): 2691–2709. \n\n[paper](http://dx.doi.org/10.1111/jeb.12267)  \n[data](http://dx.doi.org/10.5061/dryad.0nh60)  ",
    "created" : 1483614078568.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3163928770",
    "id" : "466517AE",
    "lastKnownWriteTime" : 1483614083,
    "last_content_update" : 1483614083879,
    "path" : "~/Documents/R/ggplot_workshop/ggplot2.Rpres",
    "project_path" : "ggplot2.Rpres",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_presentation"
}